plugins:
  # edit secret 
  edit-secret:
    shortCut: Ctrl-X
    description: "Edit Decoded Secret"
    scopes:
      - secrets
    command: kubectl
    background: false
    args:
      - modify-secret
      - --namespace
      - $NAMESPACE
      - --context
      - $CONTEXT
      - $NAME

  #--- Create debug container for selected pod in current namespace
  # See https://kubernetes.io/docs/tasks/debug/debug-application/debug-running-pod/#ephemeral-container
  debug:
    shortCut: Shift-D
    description: Add debug container
    scopes:
      - containers
    command: bash
    background: false
    confirm: true
    args:
      - -c
      - "kubectl debug -it -n=$NAMESPACE $POD --target=$NAME --image=nicolaka/netshoot:v0.11 --share-processes -- bash"

  # watch events on selected resources
  # requires linux "watch" command
  # change '-n' to adjust refresh time in seconds
  watch-events:
    shortCut: Shift-E
    confirm: false
    description: Get Events
    scopes:
    - all
    command: sh
    background: false
    args:
    - -c
    - "watch -n 5 kubectl get events --context $CONTEXT --namespace $NAMESPACE --field-selector involvedObject.name=$NAME"

  # Logs
  raw-logs-follow:
    shortCut: Ctrl-L
    description: logs -f
    scopes:
    - po
    command: kubectl
    background: false
    args:
    - logs
    - -f
    - $NAME
    - -n
    - $NAMESPACE
    - --context
    - $CONTEXT
    - --kubeconfig
    - $KUBECONFIG
  log-less:
    shortCut: Shift-L
    description: "logs|less"
    scopes:
    - po
    command: bash
    background: false
    args:
    - -c
    - '"$@" | less'
    - dummy-arg
    - kubectl
    - logs
    - $NAME
    - -n
    - $NAMESPACE
    - --context
    - $CONTEXT
    - --kubeconfig
    - $KUBECONFIG
  log-less-container:
    shortCut: Shift-L
    description: "logs|less"
    scopes:
    - containers
    command: bash
    background: false
    args:
    - -c
    - '"$@" | less'
    - dummy-arg
    - kubectl
    - logs
    - -c
    - $NAME
    - $POD
    - -n
    - $NAMESPACE
    - --context
    - $CONTEXT
    - --kubeconfig
    - $KUBECONFIG

  # Annotate each line in the given resource's YAML with information from the managedFields to show who last modified the field.
  # Source: https://github.com/knight42/kubectl-blame
  blame:
    shortCut: Shift-B
    confirm: false
    description: "Blame"
    scopes:
      - all
    command: sh
    background: false
    args:
      - -c
      - '"$@" | less'
      - dummy-arg
      - kubectl-blame 
      - $RESOURCE_NAME 
      - $NAME
      - -n
      - $NAMESPACE
      - --context
      - $CONTEXT

  # Get recommendations for CPU/Memory requests and limits using Robusta KRR
  # Requires Prometheus in the Cluster and Robusta KRR (https://github.com/robusta-dev/krr) on your system
  # Open K9s in deployments/daemonsets/statefulsets view, then:
  # Shift-K to get recommendations
  krr:
    shortCut: Shift-K
    description: Get krr
    scopes:
      - deployments
      - daemonsets
      - statefulsets
    command: bash
    background: false
    confirm: false
    args:
      - -c
      - |
        LABELS=$(kubectl get $RESOURCE_NAME $NAME -n $NAMESPACE  --context $CONTEXT  --show-labels | awk '{print $NF}' | awk '{if(NR>1)print}')
        krr simple --cluster $CONTEXT --selector $LABELS 
        echo "Press 'q' to exit"
        while : ; do
        read -n 1 k <&1
        if [[ $k = q ]] ; then
        break
        fi
        done
